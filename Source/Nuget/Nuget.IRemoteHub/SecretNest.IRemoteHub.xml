<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SecretNest.IRemoteHub</name>
    </assembly>
    <members>
        <member name="T:SecretNest.RemoteHub.ClientIdEventArgs">
            <summary>
            Represents an argument contains client id.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteHub.ClientIdEventArgs.ClientId">
            <summary>
            Gets the client id.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteHub.ClientIdEventArgs.#ctor(System.Guid)">
            <summary>
            Initializes an instance of ClientIdEventArgs.
            </summary>
            <param name="clientId">Client id.</param>
        </member>
        <member name="T:SecretNest.RemoteHub.ClientWithVirtualHostSettingEventArgs">
            <summary>
            Represents an argument contains client id, virtual host setting id and setting data.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteHub.ClientWithVirtualHostSettingEventArgs.VirtualHostSettingId">
            <summary>
            Gets the virtual host setting id.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteHub.ClientWithVirtualHostSettingEventArgs.VirtuaHostSetting">
            <summary>
            Gets the virtual host setting
            </summary>
        </member>
        <member name="M:SecretNest.RemoteHub.ClientWithVirtualHostSettingEventArgs.#ctor(System.Guid,System.Guid,System.Collections.Generic.KeyValuePair{System.Guid,SecretNest.RemoteHub.VirtualHostSetting}[])">
            <summary>
            Initializes an instance of ClientWithVirtualHostSettingEventArgs.
            </summary>
            <param name="clientId">Client id.</param>
            <param name="virtualHostSettingId">Virtual host setting id.</param>
            <param name="virtuaHostSetting">Virtual host setting.</param>
        </member>
        <member name="T:SecretNest.RemoteHub.ConnectionExceptionEventArgs">
            <summary>
            Contains the exception occurred while accessing underlying object.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteHub.ConnectionExceptionEventArgs.Exception">
            <summary>
            Gets the exception occurred while accessing underlying object.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteHub.ConnectionExceptionEventArgs.IsFatal">
            <summary>
            Gets whether this exception is a fatal one which terminated the connection and further jobs.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteHub.ConnectionExceptionEventArgs.IsRetried">
            <summary>
            Gets whether the operation which raised this exception is retried.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteHub.ConnectionExceptionEventArgs.#ctor(System.Exception,System.Boolean,System.Boolean)">
            <summary>
            Initializes an instance of ConnectionExceptionEventArgs.
            </summary>
            <param name="exception">The exception occurred while accessing underlying object.</param>
            <param name="isFatal">Whether this exception is a fatal one which terminated the connection and further jobs.</param>
            <param name="isRetried">Whether the operation which raised this exception is retried.</param>
        </member>
        <member name="T:SecretNest.RemoteHub.OnMessageReceivedCallback`1">
            <summary>
            Represents a method that will handle the message received from private channel.
            </summary>
            <param name="receiverClientId">Client id of the receiver.</param>
            <typeparam name="T">Type of the message data.</typeparam>
            <param name="message">Message body.</param>
        </member>
        <member name="T:SecretNest.RemoteHub.IRemoteHub">
            <summary>
            Represents the base, non-generic version of the generic <see cref="T:SecretNest.RemoteHub.IRemoteHub`1"/>.
            </summary>
        </member>
        <member name="E:SecretNest.RemoteHub.IRemoteHub.ConnectionErrorOccurred">
            <summary>
            Occurs while an connection related exception is thrown.
            </summary>
        </member>
        <member name="E:SecretNest.RemoteHub.IRemoteHub.RemoteClientUpdated">
            <summary>
            Occurs while a remote client is added or changed virtual host setting.
            </summary>
        </member>
        <member name="E:SecretNest.RemoteHub.IRemoteHub.RemoteClientRemoved">
            <summary>
            Occurs while a remote client is removed.
            </summary>
        </member>
        <member name="E:SecretNest.RemoteHub.IRemoteHub.Started">
            <summary>
            Occurs when this instance started.
            </summary>
        </member>
        <member name="E:SecretNest.RemoteHub.IRemoteHub.Stopped">
            <summary>
            Occurs when this instance stopped. Also will be raised if the instance is stopped by the request from underlying object and remote site.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteHub.IRemoteHub.ClientId">
            <summary>
            Gets the client id.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHub.ApplyVirtualHosts(System.Collections.Generic.KeyValuePair{System.Guid,SecretNest.RemoteHub.VirtualHostSetting}[])">
            <summary>
            Applies the virtual hosts setting for current client.
            </summary>
            <param name="settings">Virtual host settings. Key is virtual host id; Value is setting related to the virtual host specified.</param>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHub.TryGetVirtualHosts(System.Guid,System.Collections.Generic.KeyValuePair{System.Guid,SecretNest.RemoteHub.VirtualHostSetting}[]@)">
            <summary>
            Gets the virtual host settings of the client specified by id.
            </summary>
            <param name="clientId">Client to be queried.</param>
            <param name="settings">Virtual host settings of the client specified. <see langword="null"/> if no setting applied on this client.</param>
            <returns>Whether the client is found.</returns>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHub.TryResolveVirtualHost(System.Guid,System.Guid@)">
            <summary>
            Tries to resolve virtual host by id to host id.
            </summary>
            <param name="virtualHostId">Virtual host id.</param>
            <param name="clientId">Client id as the result.</param>
            <returns>Whether the resolving is succeeded or not.</returns>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHub.Start">
            <summary>
            Starts instance operating.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHub.Stop">
            <summary>
            Stops instance operating.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteHub.IRemoteHub.IsStarted">
            <summary>
            Gets whether this instance is started or not.
            </summary>
        </member>
        <member name="T:SecretNest.RemoteHub.IRemoteHub`1">
            <summary>
            Represents the methods, properties and event of RemoteHub.
            </summary>
            <typeparam name="T">Type of the message data.</typeparam>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHub`1.SendMessage(System.Guid,`0)">
            <summary>
            Sends a message to the a client specified by id.
            </summary>
            <param name="clientId">Client id.</param>
            <param name="message">Message to be sent.</param>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHub`1.SendMessageAsync(System.Guid,`0)">
            <summary>
            Creates a task that sends a message to the a client specified by id.
            </summary>
            <param name="clientId">Client id.</param>
            <param name="message">Message to be sent.</param>
            <returns>A task that represents the sending job.</returns>
        </member>
        <member name="T:SecretNest.RemoteHub.IRemoteHubAdapter">
            <summary>
            Represents the base, non-generic version of the generic <see cref="T:SecretNest.RemoteHub.IRemoteHubAdapter`1"/>.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter.AddClientAsync(System.Guid[])">
            <summary>
            Adds a local client by id.
            </summary>
            <param name="clientId">Client id.</param>
            <returns>A task that represents the adding operating.</returns>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter.RemoveClientAsync(System.Guid[])">
            <summary>
            Removes a local client by id.
            </summary>
            <param name="clientId">Client id.</param>
            <returns>A task that represents the removing operating.</returns>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter.RemoveAllClientsAsync">
            <summary>
            Removes all registered local clients.
            </summary>
            <returns>A task that represents the removing operating.</returns>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter.AddClient(System.Guid[])">
            <summary>
            Adds a local client by id.
            </summary>
            <param name="clientId">Client id.</param>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter.RemoveClient(System.Guid[])">
            <summary>
            Removes a local client by id.
            </summary>
            <param name="clientId">Client id.</param>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter.RemoveAllClients">
            <summary>
            Removes all registered local clients.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter.GetAllClients">
            <summary>
            Gets all current registered local clients.
            </summary>
            <returns>Ids of all current registered clients.</returns>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter.GetAllRemoteClients">
            <summary>
            Gets all found remote clients.
            </summary>
            <returns>Ids of all found remote clients.</returns>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter.Start">
            <summary>
            Starts the underlying object required operations.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter.Stop">
            <summary>
            Stops the underlying object required operations.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteHub.IRemoteHubAdapter.IsStarted">
            <summary>
            Gets whether this adapter is started or not.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter.ApplyVirtualHosts(System.Guid,System.Collections.Generic.KeyValuePair{System.Guid,SecretNest.RemoteHub.VirtualHostSetting}[])">
            <summary>
            Applies virtual host settings on the client specified by id.
            </summary>
            <param name="clientId">Client which will settings be applied on.</param>
            <param name="settings">Virtual host settings. Null for no virtual host enabled.</param>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter.TryGetVirtualHosts(System.Guid,System.Collections.Generic.KeyValuePair{System.Guid,SecretNest.RemoteHub.VirtualHostSetting}[]@)">
            <summary>
            Gets the virtual host settings of the client specified by id.
            </summary>
            <param name="clientId">Client to be queried.</param>
            <param name="settings">Virtual host settings of the client specified. <see langword="null"/> if no setting applied on this client.</param>
            <returns>Whether the client is found.</returns>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter.TryResolveVirtualHost(System.Guid,System.Guid@)">
            <summary>
            Tries to resolve virtual host by id to remote client id.
            </summary>
            <param name="virtualHostId">Virtual host id to be resolved.</param>
            <param name="clientId">Client id as the result.</param>
            <returns>Whether the resolving is succeeded or not.</returns>
        </member>
        <member name="E:SecretNest.RemoteHub.IRemoteHubAdapter.ConnectionErrorOccurred">
            <summary>
            Occurs while an connection related exception is thrown.
            </summary>
        </member>
        <member name="E:SecretNest.RemoteHub.IRemoteHubAdapter.RemoteClientUpdated">
            <summary>
            Occurs while a remote client is added or changed virtual host setting.
            </summary>
            <remarks>For avoiding client status mismatched, introduced by adding and removing the same client within a tiny timespan, this event should be raised synchronously only.</remarks>
        </member>
        <member name="E:SecretNest.RemoteHub.IRemoteHubAdapter.RemoteClientRemoved">
            <summary>
            Occurs while a remote client is removed.
            </summary>
            <remarks>For avoiding client status mismatched, introduced by adding and removing the same client within a tiny timespan, this event should be raised synchronously only.</remarks>
        </member>
        <member name="E:SecretNest.RemoteHub.IRemoteHubAdapter.AdapterStarted">
            <summary>
            Occurs when this adapter started.
            </summary>
        </member>
        <member name="E:SecretNest.RemoteHub.IRemoteHubAdapter.AdapterStopped">
            <summary>
            Occurs when this adapter stopped. Also will be raised if the adapter is stopped by the request from underlying object and remote site.
            </summary>
        </member>
        <member name="T:SecretNest.RemoteHub.IRemoteHubAdapter`1">
            <summary>
            Represents the methods of RemoteHubAdapter, which converts RemoteHub commands and events to underlying object.
            </summary>
            <typeparam name="T">Type of the message data.</typeparam>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter`1.SendPrivateMessageAsync(System.Guid,`0)">
            <summary>
            Sends private message to a client specified by id.
            </summary>
            <param name="clientId">Client id.</param>
            <param name="message">Message to be sent.</param>
            <returns>A task that represents the sending job.</returns>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter`1.SendPrivateMessage(System.Guid,`0)">
            <summary>
            Sends private message to a client specified by id.
            </summary>
            <param name="clientId">Client id.</param>
            <param name="message">Message to be sent.</param>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter`1.AddOnMessageReceivedCallback(SecretNest.RemoteHub.OnMessageReceivedCallback{`0})">
            <summary>
            Adds a callback that will be used for dealing received private message.
            </summary>
            <param name="callback">The callback to be used for dealing received private message.</param>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter`1.RemoveOnMessageReceivedCallback(SecretNest.RemoteHub.OnMessageReceivedCallback{`0})">
            <summary>
            Removes a callback which is used for dealing received private message.
            </summary>
            <param name="callback">The callback which is used for dealing received private message.</param>
        </member>
        <member name="M:SecretNest.RemoteHub.IRemoteHubAdapter`1.RemoveAllOnMessageReceivedCallbacks">
            <summary>
            Removes all callbacks which are used for dealing received private message.
            </summary>
        </member>
        <member name="T:SecretNest.RemoteHub.VirtualHostSetting">
            <summary>
            Represents a setting of a virtual host.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteHub.VirtualHostSetting.Priority">
            <summary>
            Gets the priority of this host in this virtual host.
            </summary>
        </member>
        <member name="P:SecretNest.RemoteHub.VirtualHostSetting.Weight">
            <summary>
            Gets the weight of this host in this virtual host.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteHub.VirtualHostSetting.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SecretNest.RemoteHub.VirtualHostSetting.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SecretNest.RemoteHub.VirtualHostSetting.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance of VirtualHostSetting
            </summary>
            <param name="priority">Priority of this host in this virtual host.</param>
            <param name="weight">Weight of this host in this virtual host.</param>
        </member>
    </members>
</doc>
