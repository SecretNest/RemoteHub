<?xml version="1.0" encoding="utf-8"?>
<topic id="0241d550-bee5-4690-b22b-3399ba7a7bf1" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Stream Direct, SecretNest.RemoteHub.StreamDirect, is a library contains the Remote Hub client for attaching to local switch instance directly.</para>
    </introduction>

    <section>
      <title>Use this library</title>
      <content>
        <para>This library defines the Remote Hub client, named as <codeEntityReference qualifyHint="false">T:SecretNest.RemoteHub.RemoteHubSwitchDirect`1</codeEntityReference>, which implemented <codeEntityReference qualifyHint="false">T:SecretNest.RemoteHub.IRemoteHub`1</codeEntityReference> and <codeEntityReference qualifyHint="false">T:SecretNest.RemoteHub.IRemoteHubAdapter`1</codeEntityReference>, can be attached to an instance of switch directly.</para>
        <para>Switch is designed to connecting clients and routing messages. But the program who hosts switch has no direct way to have access to the clients. Though a dedicated client can also be attached to the switch within the same program, it requires one more client to receive the message relayed from it and the medium for message transportation between these 2 clients. Stream Direct is the easy solution for this need.</para>
        <para>Switch Direct is a Remote Hub client combined with a user side, which implemented <codeEntityReference qualifyHint="false">T:SecretNest.RemoteHub.IRemoteHub`1</codeEntityReference> and <codeEntityReference qualifyHint="false">T:SecretNest.RemoteHub.IRemoteHubAdapter`1</codeEntityReference> in the same component, can be attached to the switch and handle the user side operations. No need to work in pair, thus no medium is required.</para>
      </content>
    </section>

    <section>
      <title>Type parameter</title>
      <content>
        <para>Type parameter of Stream Direct is used for sending and receiving user messages.</para>
        <para>Currently, only byte array (byte[] in C#.Net / Byte() in VB.Net) and string are acceptable. Passing other type while creating while cause an exception thrown.</para>
        <para>Due to transportation on switch is based on byte array, when string is chosen while constructing adapter, an encoder could be provided. If not, Encoding.Default will be used.</para>
        <para>When string is used, the messages sent will be encoded before putting on switch, and the received messages will be decoded before calling the callback.</para>
        <para>The type is applied on the user messages only. System messages, like those for client discovering, will not be affected.</para>
      </content>
    </section>

    <section>
      <title>Callback</title>
      <content>
        <para>A instance of <codeEntityReference qualifyHint="false">T:SecretNest.RemoteHub.OnMessageReceivedCallback`1</codeEntityReference> need to be prepared for receiving user messages. Type of the delegate is the same as the type parameter passed into the Stream Direct.</para>
        <para>The callback instance need to be passed as an argument of the constructor of Stream Direct.</para>
      </content>
    </section>
    
    <relatedTopics>
      <link xlink:href="3d44d1cd-5d0c-4c89-bedd-49830a60baec" /> <!--IRemoteHub-->
      <link xlink:href="fb014e2d-05c2-4da2-9ed3-0032564a7ae0" /> <!--HowToSwitch-->
      <link xlink:href="754f0327-c190-40b4-b091-93e104cc78be" /> <!--Switch-->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
