<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SecretNest.RemoteHub.Redis</name>
    </assembly>
    <members>
        <member name="T:SecretNest.RemoteHub.RemoteHubOverRedis`1">
            <summary>
            Handles the host state and message transportation.
            </summary>
            <typeparam name="T">Type of the message data. Only string and byte array (byte[]) are supported.</typeparam>
        </member>
        <member name="M:SecretNest.RemoteHub.RemoteHubOverRedis`1.#ctor(System.Guid,System.String,SecretNest.RemoteHub.OnMessageReceivedCallback{`0},System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of RemoteHubOverRedis.
            </summary>
            <param name="clientId">Client id of the local RemoteHub.</param>
            <param name="redisConfiguration">The string configuration to use for Redis multiplexer.</param>
            <param name="onMessageReceivedCallback">The callback to be used for dealing received private message.</param>
            <param name="mainChannelName">Main channel name. Default value is "RemoteHub".</param>
            <param name="privateChannelNamePrefix">Prefix in naming of the private channel. Default value is "RemoteHubPrivate_".</param>
            <param name="redisDb">The id to get a database for. Used in getting Redis database. Default value is 0.</param>
            <param name="clientTimeToLive">Time to live (TTL) value of the host in seconds. Any records of hosts expired will be removed. Default value is 30 seconds.</param>
            <param name="clientRefreshingInterval">Interval between refresh command sending operations in seconds. Default value is 15 seconds.</param>
        </member>
        <member name="E:SecretNest.RemoteHub.RemoteHubOverRedis`1.RemoteClientUpdated">
            <inheritdoc/>
        </member>
        <member name="E:SecretNest.RemoteHub.RemoteHubOverRedis`1.RemoteClientRemoved">
            <inheritdoc/>
        </member>
        <member name="E:SecretNest.RemoteHub.RemoteHubOverRedis`1.ConnectionErrorOccurred">
            <inheritdoc/>
        </member>
        <member name="E:SecretNest.RemoteHub.RemoteHubOverRedis`1.Started">
            <inheritdoc/>
        </member>
        <member name="E:SecretNest.RemoteHub.RemoteHubOverRedis`1.Stopped">
            <inheritdoc/>
        </member>
        <member name="P:SecretNest.RemoteHub.RemoteHubOverRedis`1.ClientId">
            <inheritdoc/>
        </member>
        <member name="M:SecretNest.RemoteHub.RemoteHubOverRedis`1.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by this instance.
            </summary>
            <param name="disposing">True: release both managed and unmanaged resources; False: release only unmanaged resources.</param>
        </member>
        <member name="M:SecretNest.RemoteHub.RemoteHubOverRedis`1.Dispose">
            <summary>
            Releases all resources used by this instance.
            </summary>
        </member>
        <member name="M:SecretNest.RemoteHub.RemoteHubOverRedis`1.SendMessage(StackExchange.Redis.RedisChannel,`0)">
            <inheritdoc/>
        </member>
        <member name="M:SecretNest.RemoteHub.RemoteHubOverRedis`1.SendMessageAsync(StackExchange.Redis.RedisChannel,`0)">
            <inheritdoc/>
        </member>
        <member name="M:SecretNest.RemoteHub.RemoteHubOverRedis`1.TryResolve(System.Guid,StackExchange.Redis.RedisChannel@)">
            <inheritdoc/>
        </member>
        <member name="M:SecretNest.RemoteHub.RemoteHubOverRedis`1.SendMessage(System.Guid,`0)">
            <summary>
            Sends a message to the a client specified by id.
            </summary>
            <param name="clientId">Client id.</param>
            <param name="message">Message to be sent.</param>
            <remarks><see cref="T:StackExchange.Redis.RedisServerException"/> and <see cref="T:StackExchange.Redis.RedisTimeoutException"/> may be thrown when the Redis error occurred while sending message. Redis Adapter will always return true because it won't check whether the target specified by id exists or not.</remarks>
        </member>
        <member name="M:SecretNest.RemoteHub.RemoteHubOverRedis`1.SendMessageAsync(System.Guid,`0)">
            <summary>
            Creates a task that sends a message to the a client specified by id.
            </summary>
            <param name="clientId">Client id.</param>
            <param name="message">Message to be sent.</param>
            <remarks><see cref="T:StackExchange.Redis.RedisServerException"/> and <see cref="T:StackExchange.Redis.RedisTimeoutException"/> may be thrown when the Redis error occurred while sending message. Redis Adapter will always return true because it won't check whether the target specified by id exists or not.</remarks>
        </member>
        <member name="M:SecretNest.RemoteHub.RemoteHubOverRedis`1.ApplyVirtualHosts(System.Collections.Generic.KeyValuePair{System.Guid,SecretNest.RemoteHub.VirtualHostSetting}[])">
            <inheritdoc/>
        </member>
        <member name="M:SecretNest.RemoteHub.RemoteHubOverRedis`1.TryResolveVirtualHost(System.Guid,System.Guid@)">
            <inheritdoc/>
        </member>
        <member name="M:SecretNest.RemoteHub.RemoteHubOverRedis`1.Start">
            <inheritdoc/>
        </member>
        <member name="M:SecretNest.RemoteHub.RemoteHubOverRedis`1.Stop">
            <inheritdoc/>
        </member>
        <member name="P:SecretNest.RemoteHub.RemoteHubOverRedis`1.IsStarted">
            <inheritdoc/>
        </member>
    </members>
</doc>
